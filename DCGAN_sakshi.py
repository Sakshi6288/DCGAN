## Sakshi_Rasanya
"""trial1.ipynb
(This file is for DCGAN algorithm- I have changed the hyperparameters like this below to get the better results for geometrical shapes)
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pry_C6ODtcWA3IBKhENbz1-_LN5CLJqM
"""
## This code is not generating shapes with black and white image dataset. and also not generating mentioned number of test images.
# Commented out IPython magic to ensure Python compatibility.
import argparse
import os
import numpy as np
import math
from PIL import Image

import torchvision.transforms as transforms
from torchvision.utils import save_image

from torch.utils.data import DataLoader
from torchvision import datasets
from torch.autograd import Variable

import torch.nn as nn
import torch.nn.functional as F
import torch
##Added
from pytorch_fid import fid_score
import torch.optim as optim
import torchvision.utils as vutils
from tqdm import tqdm

os.makedirs("images", exist_ok=True)

parser = argparse.ArgumentParser()
parser.add_argument("--n_epochs", type=int, default=2, help="number of epochs of training")
parser.add_argument("--batch_size", type=int, default=128, help="size of the batches")
parser.add_argument("--lr", type=float, default=0.0002, help="adam: learning rate")
parser.add_argument("--b1", type=float, default=0.5, help="adam: decay of first order momentum of gradient")
parser.add_argument("--b2", type=float, default=0.999, help="adam: decay of first order momentum of gradient")
parser.add_argument("--n_cpu", type=int, default=8, help="number of cpu threads to use during batch generation")
parser.add_argument("--latent_dim", type=int, default=100, help="dimensionality of the latent space")
parser.add_argument("--img_size", type=int, default=128, help="size of each image dimension")
parser.add_argument("--channels", type=int, default=1, help="number of image channels")
parser.add_argument("--sample_interval", type=int, default=20, help="interval between image sampling")
opt = parser.parse_args()
print(opt)

cuda = True if torch.cuda.is_available() else False

def weights_init_normal(m):
    classname = m.__class__.__name__
    if classname.find("Conv") != -1:
        torch.nn.init.normal_(m.weight.data, 0.0, 0.02)
    elif classname.find("BatchNorm2d") != -1:
        torch.nn.init.normal_(m.weight.data, 1.0, 0.02)
        torch.nn.init.constant_(m.bias.data, 0.0)


class Generator(nn.Module):
    def __init__(self):
        super(Generator, self).__init__()

        self.init_size = opt.img_size // 4
        self.l1 = nn.Sequential(nn.Linear(opt.latent_dim, 128 * self.init_size ** 2)) 

        self.conv_blocks = nn.Sequential(
            nn.BatchNorm2d(128),
            nn.Upsample(scale_factor=2),
            nn.Conv2d(128, 128, 3, stride=1, padding=1),
            nn.BatchNorm2d(128, 0.8),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Upsample(scale_factor=2),
            nn.Conv2d(128, 64, 3, stride=1, padding=1),
            nn.BatchNorm2d(64, 0.8),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(64, opt.channels, 3, stride=1, padding=1),
            nn.Tanh(),
        )

    def forward(self, z):
        out = self.l1(z)
        out = out.view(out.shape[0], 128, self.init_size, self.init_size)
        img = self.conv_blocks(out)
        return img


class Discriminator(nn.Module):
    def __init__(self):
        super(Discriminator, self).__init__()

        def discriminator_block(in_filters, out_filters, bn=True):
            block = [nn.Conv2d(in_filters, out_filters, 3, 2, 1), nn.LeakyReLU(0.2, inplace=True), nn.Dropout2d(0.25)]
            if bn:
                block.append(nn.BatchNorm2d(out_filters, 0.8))
            return block

        self.model = nn.Sequential(
            *discriminator_block(opt.channels, 16, bn=False),
            *discriminator_block(16, 32),
            *discriminator_block(32, 64),
            *discriminator_block(64, 128),
        )

        # The height and width of downsampled image
        ds_size = opt.img_size // 2 ** 4
        self.adv_layer = nn.Sequential(nn.Linear(128 * ds_size ** 2, 1), nn.Sigmoid())

    def forward(self, img):
        out = self.model(img)
        out = out.view(out.shape[0], -1)
        validity = self.adv_layer(out)

        return validity

'''class Discriminator(nn.Module):
    def __init__(self):
        super(Discriminator, self).__init__()

        # Upsampling
        self.down = nn.Sequential(nn.Conv2d(opt.channels, 64, 3, 2, 1), nn.ReLU())
        # Fully-connected layers
        self.down_size = opt.img_size // 2
        down_dim = 64 * (opt.img_size // 2) ** 2
        self.fc = nn.Sequential(
            nn.Linear(down_dim, 32),
            nn.BatchNorm1d(32, 0.8),
            nn.ReLU(inplace=True),
            nn.Linear(32, down_dim),
            nn.BatchNorm1d(down_dim),
            nn.ReLU(inplace=True),
        )
        # Upsampling
        self.up = nn.Sequential(nn.Upsample(scale_factor=2), nn.Conv2d(64, opt.channels, 3, 1, 1))

    def forward(self, img):
        out = self.down(img)
        out = self.fc(out.view(out.size(0), -1))
        out = self.up(out.view(out.size(0), 64, self.down_size, self.down_size))
        return out'''

# Loss function
adversarial_loss = torch.nn.BCELoss()

# Initialize generator and discriminator
generator = Generator()
discriminator = Discriminator()

if cuda:
    generator.cuda()
    discriminator.cuda()
    adversarial_loss.cuda()

# Initialize weights
generator.apply(weights_init_normal)
discriminator.apply(weights_init_normal)


# Configure data loader
os.makedirs("data", exist_ok=True)

##
dataloader = torch.utils.data.DataLoader(
    datasets.ImageFolder(
        r"C:\Users\ANNA MANI\Desktop\labels_sakshi\lego_ALL_results\LEGO_data",
        transform=transforms.Compose(
            [transforms.Grayscale(num_output_channels=1),transforms.Resize((opt.img_size,opt.img_size)), transforms.ToTensor(),
             transforms.Normalize([0.5], [0.5])]
        ),
    ),
    batch_size=opt.batch_size,
    shuffle=True,
)

# Optimizers
optimizer_G = torch.optim.Adam(generator.parameters(), lr=opt.lr, betas=(opt.b1, opt.b2))
optimizer_D = torch.optim.Adam(discriminator.parameters(), lr=opt.lr, betas=(opt.b1, opt.b2))

Tensor = torch.cuda.FloatTensor if cuda else torch.FloatTensor

# path to save checkpoints
checkpoint_dir = "checkpoints"
os.makedirs(checkpoint_dir, exist_ok=True)

# define the interval for saving checkpoints
save_checkpoint_interval = 100

# BEGAN hyper parameters
#gamma = 0.75
#lambda_k = 0.001
#k = 0.0
# ----------
#  Training
# ----------

for epoch in range(opt.n_epochs):
    for i, (imgs, _) in enumerate(dataloader):

        # Adversarial ground truths
        valid = Variable(Tensor(imgs.shape[0], 1).fill_(1.0), requires_grad=False)
        fake = Variable(Tensor(imgs.shape[0], 1).fill_(0.0), requires_grad=False)

        # Configure input
        real_imgs = Variable(imgs.type(Tensor))

        # -----------------
        #  Train Generator
        # -----------------

        optimizer_G.zero_grad()

        # Sample noise as generator input
        z = Variable(Tensor(np.random.normal(0, 1, (imgs.shape[0], opt.latent_dim))))

        # Generate a batch of images
        gen_imgs = generator(z)

        # Loss measures generator's ability to fool the discriminator
        g_loss = adversarial_loss(discriminator(gen_imgs), valid)
        #g_loss = torch.mean(torch.abs(discriminator(gen_imgs) - gen_imgs))

        g_loss.backward()
        optimizer_G.step()

        # ---------------------
        #  Train Discriminator
        # ---------------------

        optimizer_D.zero_grad()

        # Measure discriminator's ability to classify real from generated samples
        real_loss = adversarial_loss(discriminator(real_imgs), valid)
        fake_loss = adversarial_loss(discriminator(gen_imgs.detach()), fake)
        d_loss = (real_loss + fake_loss) / 2
        
        #d_real = discriminator(real_imgs)
        #d_fake = discriminator(gen_imgs.detach())
        
        #d_loss_real = torch.mean(torch.abs(d_real - real_imgs))
        #d_loss_fake = torch.mean(torch.abs(d_fake - gen_imgs.detach()))
        #d_loss = d_loss_real - k * d_loss_fake

        d_loss.backward()
        optimizer_D.step()
        
        # ----------------
        # Update weights
        # ----------------

        '''diff = torch.mean(gamma * d_loss_real - d_loss_fake)

        # Update weight term for fake samples
        k = k + lambda_k * diff.item()
        k = min(max(k, 0), 1)  # Constraint to interval [0, 1]

        # Update convergence metric
        M = (d_loss_real + torch.abs(diff)).item()'''

        print(
            "[Epoch %d/%d] [Batch %d/%d] [D loss: %f] [G loss: %f]"
             % (epoch, opt.n_epochs, i, len(dataloader), d_loss.item(), g_loss.item())
        )

        batches_done = epoch * len(dataloader) + i
        if batches_done % opt.sample_interval == 0:
            save_image(gen_imgs.data[:8], "images/%d.png" % batches_done, nrow=4, normalize=True)
            
            
            
# Save the final generator and discriminator weights after training
final_checkpoint_G_path = os.path.join(checkpoint_dir, "G.pth")
final_checkpoint_D_path = os.path.join(checkpoint_dir, "D.pth")
torch.save(generator.state_dict(), final_checkpoint_G_path)
torch.save(discriminator.state_dict(), final_checkpoint_D_path)
print(f"Saved final checkpoints: {final_checkpoint_G_path} and {final_checkpoint_D_path}")

## Testing of the model
# Number of images you want to generate for testing
num_test_samples = 1000

# Load the saved generator checkpoint for testing
generator.eval()
generator.load_state_dict(torch.load(final_checkpoint_G_path))
if cuda:
    generator.cuda()

# Generate test images
# Assuming 'test_data_loader' is your DataLoader for the test data
test_data_loader = torch.utils.data.DataLoader(
    datasets.ImageFolder(
        r"C:\Users\ANNA MANI\LEGOshape\New folder\Black&White_LEGO\train",  # Replace with the path to your test data
        transform=transforms.Compose(
            [transforms.Resize((128, 128), interpolation=Image.BILINEAR),
             transforms.ToTensor(),
             transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5])]),
    ), batch_size=opt.batch_size, shuffle=False,)

os.makedirs("test_images", exist_ok=True)

# Generate and save test images
for i, (test_img, _) in enumerate(test_data_loader):
    if cuda:
        test_img = Variable(Tensor(np.random.normal(0, 1, (1, opt.latent_dim))))
        test_img = test_img.cuda()
        
    # Generate image from the test input
    generated_img = generator(test_img)

    # Save the generated image
    save_image(generated_img.data, f"test_images/generated_image_{i}.png")

print(f"Saved {num_test_samples} generated images to the 'test_images' folder.")

'''# Generate and save test images using the pre-trained generator
for i, (test_img, _) in enumerate(test_data_loader):
    # Sample noise as generator input
    test_noise_single = Variable(Tensor(np.random.normal(0, 1, (1, opt.latent_dim))))

    # Generate image from the random noise
    generated_img = generator(test_noise_single)

    # Save the generated image
    save_image(generated_img.data, f"test_images/generated_image_{i}.png")

    if i + 1 == num_test_samples:
        break  # Stop the loop after generating the desired number of images

print(f"Saved {num_test_samples} generated images to the 'test_images' folder.")'''
